{
  "inherit": [
    "base.test_list"
  ],
  "constants": {
    "enable_factory_server": true,
    "__comment_enable_factory_server": "Enable factory_server. Change this to false by adding 'disable_factory_server.test_list' to beginning of inherit list in main test list. Note that some factory environment might not need a shopfloor.",
    "sd": {
      "sysfs_path": "/sys/devices/pci0000:00/0000:00:xx.y/mmc_host"
    },
    "__comment_sd_sysfs_path": "Use 'udevadm monitor' to find out udev sysfs path.",
    "typec_usb": {
      "left": {
        "usb2_sysfs_path": "/sys/devices/pci0000:00/0000:00:xx.y/usb1/?-?",
        "usb3_sysfs_path": "/sys/devices/pci0000:00/0000:00:xx.y/usb2/?-?",
        "uvc_video_dev_port": "?-?",
        "usbpd_id": -1,
        "display_info": [
          "DisplayPort",
          "DP-1"
        ]
      },
      "right": {
        "usb2_sysfs_path": "/sys/devices/pci0000:00/0000:00:xx.y/usb1/?-?",
        "usb3_sysfs_path": "/sys/devices/pci0000:00/0000:00:xx.y/usb2/?-?",
        "uvc_video_dev_port": "?-?",
        "usbpd_id": -1,
        "display_info": [
          "DisplayPort",
          "DP-2"
        ]
      }
    }
  },
  "definitions": {
    "AccelerometersCalibration": {
      "pytest_name": "accelerometers_calibration",
      "has_ui": true,
      "args": {
        "orientation": {
          "in_accel_x": 0,
          "in_accel_y": 0,
          "in_accel_z": 1
        },
        "spec_offset": [
          0.5,
          0.5
        ]
      }
    },
    "AccelerometersLidAngle": {
      "pytest_name": "accelerometers_lid_angle",
      "has_ui": true,
      "args": {
        "spec_offset": [
          0.5,
          0.5
        ]
      }
    },
    "AllCheckPoint": {
      "inherit": "CheckPoint",
      "label": "Check Point for All Tests",
      "args": {
        "include_parents": true
      }
    },
    "AudioJack": {
      "pytest_name": "audio_loop",
      "label": "Audio Jack",
      "has_ui": true,
      "args": {
        "require_dongle": true,
        "check_dongle": true,
        "tests_to_conduct": [
          {
            "type": "sinewav",
            "freq_threshold": 300,
            "rms_threshold": [
              0.08,
              null
            ]
          }
        ]
      }
    },
    "Backlight": {
      "pytest_name": "backlight",
      "has_ui": true
    },
    "BadBlocks": {
      "pytest_name": "bad_blocks",
      "has_ui": true,
      "__comment": "When run alone, this takes ~.5s/MiB (for four passes).  We'll do a gigabyte, which takes about about 9 minutes.",
      "args": {
        "timeout_secs": 120,
        "log_threshold_secs": 10,
        "max_bytes": 1073741824
      }
    },
    "Barrier": {
      "pytest_name": "summary",
      "label": "Barrier",
      "has_ui": true,
      "never_fails": true,
      "action_on_failure": "STOP",
      "disable_abort": true,
      "args": {
        "disable_input_on_fail": true,
        "pass_without_prompt": true,
        "accessibility": true
      }
    },
    "BaseAccelerometersCalibration": {
      "inherit": "AccelerometersCalibration",
      "args": {
        "location": "base"
      }
    },
    "Battery": {
      "pytest_name": "battery"
    },
    "BatterySysfs": {
      "pytest_name": "battery_sysfs"
    },
    "BlockingCharge": {
      "pytest_name": "blocking_charge",
      "has_ui": true,
      "exclusive_resources": [
        "POWER"
      ]
    },
    "Bluetooth": {
      "pytest_name": "bluetooth",
      "has_ui": true,
      "args": {
        "expected_adapter_count": 1,
        "scan_devices": true,
        "average_rssi_threshold": -55.0
      }
    },
    "BluetoothProbe": {
      "inherit": "ExecShell",
      "label": "Bluetooth Probe",
      "args": {
        "commands": "hciconfig hci0"
      }
    },
    "Button": {
      "pytest_name": "button",
      "has_ui": true,
      "args": {
        "timeout_secs": 120
      }
    },
    "Camera": {
      "pytest_name": "camera",
      "has_ui": true
    },
    "CameraManual": {
      "inherit": "Camera",
      "args": {
        "do_capture_manual": true
      }
    },
    "CameraProbe": {
      "pytest_name": "usb_probe",
      "label": "Camera Probe",
      "args": {
        "search_string": "Camera"
      }
    },
    "ChargeDischargeCurrent": {
      "pytest_name": "battery_current",
      "label": "Charge Discharge Current",
      "has_ui": true,
      "exclusive_resources": [
        "POWER"
      ],
      "args": {
        "min_charging_current": 150,
        "min_discharging_current": 400,
        "timeout_secs": 30,
        "max_battery_level": 90
      }
    },
    "ChargerTypeDetection": {
      "pytest_name": "ac_power",
      "label": "Charger Type Detection"
    },
    "CheckPoint": {
      "inherit": "Barrier",
      "label": "Check Point",
      "args": {
        "pass_without_prompt": false
      }
    },
    "ClearFactoryVPDEntries": {
      "inherit": "TestGroup",
      "label": "Clear factory VPD entries",
      "subtests": [
        {
          "inherit": "ExecShell",
          "label": "Clear factory VPD entries",
          "args": {
            "commands": "gooftool clear_factory_vpd_entries"
          }
        },
        "RebootStep"
      ]
    },
    "ClearTPMOwnerRequest": {
      "pytest_name": "clear_tpm_owner_request"
    },
    "ColdReset": {
      "inherit": "TestGroup",
      "label": "Cold Reset",
      "subtests": [
        {
          "inherit": "ExecShell",
          "label": "EC Cold Reset",
          "args": {
            "commands": "ectool reboot_ec cold at-shutdown"
          }
        },
        "HaltStep"
      ]
    },
    "Display": {
      "pytest_name": "display",
      "has_ui": true
    },
    "DisplayPoint": {
      "pytest_name": "display_point",
      "has_ui": true,
      "args": {
        "max_point_count": 5
      }
    },
    "ExecShell": {
      "pytest_name": "exec_shell",
      "has_ui": true
    },
    "ExternalDisplay": {
      "pytest_name": "ext_display",
      "has_ui": true,
      "args": {
        "main_display": "eDP-1"
      }
    },
    "Finish": {
      "inherit": "Message",
      "label": "Finish"
    },
    "FlashNetboot": {
      "pytest_name": "flash_netboot",
      "has_ui": true
    },
    "FlushTestlog": {
      "inherit": "SyncFactoryServer",
      "args": {
        "sync_event_logs": false,
        "update_toolkit": false,
        "upload_report": false,
        "flush_testlog": true
      }
    },
    "GetDeviceInfo": {
      "inherit": "ShopfloorService",
      "args": {
        "method": "GetDeviceInfo"
      }
    },
    "Gyroscope": {
      "pytest_name": "gyroscope",
      "has_ui": true
    },
    "HWButton": {
      "inherit": "TestGroup",
      "label": "Hardware Button",
      "subtests": [
        {
          "inherit": "Button",
          "label": "Volume Down",
          "args": {
            "button_key_name": "KEY_VOLUMEDOWN",
            "button_name": "i18n! Volume Down"
          }
        },
        {
          "inherit": "Button",
          "label": "Volume Up",
          "args": {
            "button_key_name": "KEY_VOLUMEUP",
            "button_name": "i18n! Volume Up"
          }
        },
        {
          "inherit": "Button",
          "label": "Power Button",
          "args": {
            "button_key_name": "KEY_POWER",
            "button_name": "i18n! Power Button"
          }
        }
      ]
    },
    "Idle": {
      "pytest_name": "nop",
      "label": "Idle"
    },
    "Keyboard": {
      "pytest_name": "keyboard",
      "has_ui": true,
      "args": {
        "allow_multi_keys": true
      }
    },
    "LED": {
      "pytest_name": "led",
      "has_ui": true,
      "args": {
        "challenge": true
      }
    },
    "LidAccelerometersCalibration": {
      "inherit": "AccelerometersCalibration",
      "args": {
        "location": "lid"
      }
    },
    "LidSwitch": {
      "pytest_name": "lid_switch",
      "has_ui": true
    },
    "MRCCache": {
      "label": "MRC Cache",
      "subtests": [
        {
          "pytest_name": "mrc_cache",
          "label": "Create Cache",
          "args": {
            "mode": "create"
          }
        },
        "RebootStep",
        {
          "pytest_name": "mrc_cache",
          "label": "Verify Cache",
          "args": {
            "mode": "verify"
          }
        }
      ]
    },
    "Message": {
      "pytest_name": "message",
      "has_ui": true,
      "never_fails": true
    },
    "PartitionTable": {
      "pytest_name": "partition_table"
    },
    "Probe": {
      "pytest_name": "probe",
      "label": "Probe Hardware",
      "has_ui": true,
      "args": {
        "config_file": "probe.json"
      }
    },
    "QRScan": {
      "inherit": "Camera",
      "label": "QR Scan",
      "args": {
        "do_QR_scan": true,
        "QR_string": "Hello ChromeOS!"
      }
    },
    "ReadDeviceDataFromVPD": {
      "pytest_name": "read_device_data_from_vpd",
      "has_ui": true
    },
    "RemovableStorage": {
      "pytest_name": "removable_storage",
      "has_ui": true,
      "args": {
        "block_size": 524288,
        "perform_random_test": false,
        "perform_sequential_test": true,
        "sequential_block_count": 8
      }
    },
    "SDPerformance": {
      "inherit": "RemovableStorage",
      "label": "SD Performance",
      "args": {
        "media": "SD",
        "sysfs_path": "eval! constants.sd.sysfs_path"
      }
    },
    "Scan": {
      "pytest_name": "scan",
      "has_ui": true
    },
    "ShopfloorNotifyEnd": {
      "inherit": "ShopfloorService",
      "label": "Shopfloor Service (NotifyEnd)",
      "args": {
        "method": "NotifyEnd",
        "args": [
          "eval! locals.station"
        ]
      }
    },
    "ShopfloorNotifyStart": {
      "inherit": "ShopfloorService",
      "label": "Shopfloor Service (NotifyStart)",
      "args": {
        "method": "NotifyStart",
        "args": [
          "eval! locals.station"
        ]
      }
    },
    "ShopfloorService": {
      "pytest_name": "shopfloor_service",
      "has_ui": true,
      "run_if": "constants.enable_factory_server"
    },
    "SpatialSensorCalibration": {
      "pytest_name": "spatial_sensor_calibration",
      "has_ui": true
    },
    "SpeakerDMic": {
      "pytest_name": "audio_loop",
      "label": "Speaker/Microphone",
      "has_ui": true,
      "args": {
        "require_dongle": false,
        "check_dongle": true,
        "tests_to_conduct": [
          {
            "type": "audiofun",
            "duration": 4,
            "threshold": 80
          }
        ]
      }
    },
    "Start": {
      "pytest_name": "start",
      "has_ui": true,
      "never_fails": true
    },
    "StationEnd": {
      "inherit": "FlattenGroup",
      "subtests": [
        "SyncFactoryServer",
        "ShopfloorNotifyEnd",
        "Barrier",
        "WriteDeviceDataToVPD"
      ]
    },
    "StationStart": {
      "inherit": "FlattenGroup",
      "subtests": [
        "SyncFactoryServer",
        "ShopfloorNotifyStart"
      ]
    },
    "StressAppTest": {
      "pytest_name": "stressapptest",
      "label": "Stress App Test",
      "exclusive_resources": [
        "CPU"
      ]
    },
    "Stylus": {
      "pytest_name": "stylus",
      "has_ui": true
    },
    "SuspendResume": {
      "pytest_name": "suspend_resume"
    },
    "SyncFactoryServer": {
      "pytest_name": "sync_factory_server",
      "has_ui": true,
      "run_if": "constants.enable_factory_server"
    },
    "SyncFactoryServerUploadReport": {
      "inherit": "SyncFactoryServer",
      "args": {
        "upload_report": true,
        "report_stage": "eval! locals.station"
      }
    },
    "TPMVerifyEK": {
      "pytest_name": "tpm_verify_ek"
    },
    "TabletMode": {
      "pytest_name": "tablet_mode",
      "has_ui": true
    },
    "TabletRotation": {
      "pytest_name": "tablet_rotation",
      "has_ui": true
    },
    "ThermalSensors": {
      "pytest_name": "thermal_sensors"
    },
    "Touchpad": {
      "pytest_name": "touchpad",
      "has_ui": true
    },
    "TouchpadProbe": {
      "pytest_name": "i2c_probe",
      "label": "Touchpad Probe",
      "args": {
        "addr": [],
        "auto_detect_device": "Touchpad"
      }
    },
    "Touchscreen": {
      "pytest_name": "touchscreen",
      "has_ui": true,
      "args": {
        "x_segments": 8,
        "y_segments": 8
      }
    },
    "TouchscreenFirmwareVerify": {
      "pytest_name": "verify_touch_device_fw",
      "label": "Touchscreen Firmware Verify"
    },
    "TouchscreenProbe": {
      "pytest_name": "i2c_probe",
      "label": "Touchscreen Probe",
      "args": {
        "addr": [],
        "auto_detect_device": "Touchscreen",
        "r_flag": true
      }
    },
    "TouchscreenUniformity": {
      "pytest_name": "touch_uniformity",
      "label": "Touchscreen Uniformity",
      "has_ui": true
    },
    "URandom": {
      "pytest_name": "urandom",
      "label": "Random Number Generation"
    },
    "USBPerformance": {
      "inherit": "RemovableStorage",
      "label": "USB Performance",
      "args": {
        "media": "USB"
      }
    },
    "USBTypeCManualBase": {
      "inherit": "TestGroup",
      "subtests": [
        {
          "inherit": "USBPerformance",
          "label": "USB3 CC1 Performance",
          "args": {
            "sysfs_path": "eval! locals.usb.usb3_sysfs_path",
            "usbpd_port_polarity": [
              "eval! locals.usb.usbpd_id",
              1
            ]
          }
        },
        {
          "inherit": "USBPerformance",
          "label": "USB3 CC2 Performance",
          "args": {
            "sysfs_path": "eval! locals.usb.usb3_sysfs_path",
            "usbpd_port_polarity": [
              "eval! locals.usb.usbpd_id",
              2
            ]
          }
        },
        {
          "inherit": "USBPerformance",
          "label": "USB2 Performance",
          "args": {
            "sysfs_path": "eval! locals.usb.usb2_sysfs_path"
          }
        },
        "USBTypeCManualChargeItems",
        {
          "inherit": "ExternalDisplay",
          "label": "USB3 External Display Test",
          "args": {
            "display_info": [
              "eval! locals.usb.display_info"
            ]
          }
        },
        "Barrier"
      ]
    },
    "USBTypeCManualCharge": {
      "inherit": "ChargeDischargeCurrent",
      "args": {
        "usbpd_info": [
          "eval! locals.usb.usbpd_id",
          "eval! locals.voltage * 1000 - 500",
          "eval! locals.voltage * 1000 + 500"
        ],
        "usbpd_prompt": "eval! locals.usb_label"
      }
    },
    "USBTypeCManualChargeItems": {
      "inherit": "FlattenGroup",
      "subtests": [
        {
          "inherit": "USBTypeCManualCharge",
          "label": "20V Charging",
          "locals": {
            "voltage": 20
          }
        },
        {
          "inherit": "USBTypeCManualCharge",
          "label": "5V Charging",
          "locals": {
            "voltage": 5
          }
        }
      ]
    },
    "USBTypeCManualLeft": {
      "inherit": "USBTypeCManualBase",
      "label": "Manual Test Left USB TypeC",
      "locals": {
        "usb": "eval! constants.typec_usb.left",
        "usb_label": "i18n! Left USB TypeC"
      }
    },
    "USBTypeCManualRight": {
      "inherit": "USBTypeCManualBase",
      "label": "Manual Test Right USB TypeC",
      "locals": {
        "usb": "eval! constants.typec_usb.right",
        "usb_label": "i18n! Right USB TypeC"
      }
    },
    "USBTypeCManualTest": {
      "inherit": "FlattenGroup",
      "subtests": [
        "USBTypeCManualLeft",
        "USBTypeCManualRight"
      ]
    },
    "USBTypeCTest": "USBTypeCManualTest",
    "UpdateDeviceData": {
      "pytest_name": "update_device_data",
      "has_ui": true
    },
    "UpdateFirmware": {
      "label": "Update Firmware",
      "subtests": [
        {
          "pytest_name": "update_firmware",
          "has_ui": true
        },
        "Barrier",
        "RebootStep"
      ]
    },
    "VerifyComponents": {
      "pytest_name": "verify_components",
      "has_ui": true
    },
    "VerifyRootPartition": {
      "pytest_name": "verify_root_partition",
      "has_ui": true,
      "args": {
        "max_bytes": 1048576
      }
    },
    "WebGLAquarium": {
      "pytest_name": "webgl_aquarium",
      "has_ui": true
    },
    "WifiSSIDList": {
      "pytest_name": "wifi_throughput",
      "label": "Wifi"
    },
    "Wireless": "WirelessRadiotap",
    "WirelessAntenna": {
      "pytest_name": "wireless_antenna",
      "has_ui": true,
      "exclusive_resources": [
        "NETWORK"
      ]
    },
    "WirelessRadiotap": {
      "pytest_name": "wireless_radiotap",
      "has_ui": true,
      "exclusive_resources": [
        "NETWORK"
      ]
    },
    "WriteDeviceDataToVPD": {
      "pytest_name": "write_device_data_to_vpd",
      "has_ui": true
    },
    "WriteHWID": {
      "pytest_name": "hwid_v3",
      "label": "Write HWID",
      "has_ui": true,
      "args": {
        "skip_shopfloor": "eval! not constants.enable_factory_server"
      }
    },
    "WriteProtectSwitch": {
      "pytest_name": "write_protect_switch"
    }
  }
}
