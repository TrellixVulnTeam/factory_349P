syntax = "proto3";
package cros.factory.hwid.service.appengine.proto.hwid_api_messages_pb2;

enum Status {
  UNSPECIFIED = 0;
  KNOWN_BAD_HWID = 1;
  BAD_REQUEST = 2;
  NOT_FOUND = 3;
  SCHEMA_ERROR = 4;
  YAML_ERROR = 5;
  SERVER_ERROR = 6;
}

// A component of a BOM.
message Component {
  // The type of component.
  string componentClass = 1;
  // The cannonical name
  string name = 2;
  // The probe result that results for this component.
  string probeResult = 3;
  // Extra fields that show all fields defined in HWID DB.
  repeated Field fields = 4;
}

message Field {
  string name = 1;
  string value = 2;
}

// A label on a BOM.
message Label {
  // The component-class this applies to, if any
  string componentClass = 1;
  // The label's name
  string name = 2;
  // The label's value, possibly none.
  string value = 3;
}

// A request for all boards supported by the server.
message BoardsRequest {
  // List of BOM file versions to include.
  repeated string versions = 1;
}


// A request to validate a config.
message ValidateConfigRequest {
  // The HWID config as a string.
  string hwidConfigContents = 1;
}

// A request to validate a config and update its checksum.
message ValidateConfigAndUpdateChecksumRequest {
  // The HWID config as a string.
  string hwidConfigContents = 1;
  // The previous version of the HWID config.  If present, it will trigger some
  // additional validation checks.
  string prevHwidConfigContents = 2;
}

// The response to a boards request.
message BoardsResponse {
  // A list of the supported boards.
  repeated string boards = 1;
  Status status = 2;
}

// The response to a BOM request.
message BomResponse {
  // A list of the components in the BOM.
  repeated Component components = 1;
  // A list of labels of the BOM.
  repeated Label labels = 2;
  // Build phase (corresponding to HWID image_id).
  string phase = 3;
  // Error message if there was a problem decoding the HWID, if error is set
  // the other fields in the message should be disregarded.
  string error = 4;
  Status status = 5;
}

// The response to a HWIDs request.
message HwidsResponse {
  // A filtered list of the HWIDs for a board.
  repeated string hwids = 1;
  // Error message if there was a problem looking up the HWIDs.
  string error = 2;
  Status status = 3;
}

// The response to a component classes request.
message ComponentClassesResponse {
  // A list of the components for a board.
  repeated string componentClasses = 1;
  // Error message if there was a problem looking up components.
  string error = 2;
  Status status = 3;
}

// The response to a components request.
message ComponentsResponse {
  // A filtered list of the components for a board.
  repeated Component components = 1;
  // Error message if there was a problem looking up components.
  string error = 2;
  Status status = 3;
}

// The response to a 'validate config' request.
message ValidateConfigResponse {
  // If an error occurred, this describes the error.
  string errorMessage = 1;
  Status status = 2;
}

// The response to a 'validate config and update checksum' request.
message ValidateConfigAndUpdateChecksumResponse {
  // The updated HWID config as a string.
  string newHwidConfigContents = 1;
  // If an error occurred, this describes the error.
  string errorMessage = 2;
  Status status = 3;
}

// The response to a BOM request.
message SKUResponse {
  // The board listed in the BOM.
  string board = 1;
  // The listed CPU in the BOM.
  string cpu = 2;
  // Total number of bytes of memory in the BOM.
  int64 memoryInBytes = 3;
  // String combination of board, processor and memory.
  string sku = 4;
  // Error message if there was a problem decoding the HWID, if error is set
  // the other fields in the message should be disregarded.
  string error = 5;
  // A human readable string representing the memory on the device.
  string memory = 6;
  Status status = 7;
}

// A label of a DUT.
message DUTLabel {
  // The name of the label.
  string name = 1;
  // The value of the property associated with this label name.
  string value = 2;
}

// The response to a DUT label request.
message DUTLabelResponse {
  // A list of DUTLabel messages.
  repeated DUTLabel labels = 1;
  // Details of any errors when constructing the list of labels.
  string error = 2;
  // Possible labels in the labels field.
  repeated string possible_labels = 3;
  Status status = 4;
}
