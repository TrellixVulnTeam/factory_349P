syntax = "proto3";
package cros.factory.hwid.service.appengine.proto.hwid_api_messages_pb2;

enum Status {
  STATUS_UNSPECIFIED = 0;
  SUCCESS = 1;
  KNOWN_BAD_HWID = 2;
  BAD_REQUEST = 3;
  NOT_FOUND = 4;
  SCHEMA_ERROR = 5;
  YAML_ERROR = 6;
  SERVER_ERROR = 7;
}

// A component of a BOM.
message Component {
  // The type of component.
  string component_class = 1;
  // The canonical name
  string name = 2;
  // The probe result that results for this component.
  string probe_result = 3;
  // Extra fields that show all fields defined in HWID DB.
  repeated Field fields = 4;
}

message Field {
  string name = 1;
  string value = 2;
}

// A label on a BOM.
message Label {
  // The component-class this applies to, if any
  string component_class = 1;
  // The label's name
  string name = 2;
  // The label's value, possibly none.
  string value = 3;
}

// A request for all boards supported by the server.
message BoardsRequest {
  // List of BOM file versions to include.
  repeated string versions = 1;
}


// A request to validate a config.
message ValidateConfigRequest {
  // The HWID config as a string.
  string hwid_config_contents = 1;
}

// A request to validate a config and update its checksum.
message ValidateConfigAndUpdateChecksumRequest {
  // The HWID config as a string.
  string hwid_config_contents = 1;
  // The previous version of the HWID config.  If present, it will trigger some
  // additional validation checks.
  string prev_hwid_config_contents = 2;
}

// The response to a boards request.
message BoardsResponse {
  // A list of the supported boards.
  repeated string boards = 1;
  Status status = 2;
}

// A request to query BOM data from a given HWID string.
message BomRequest {
  // The HWID string.
  string hwid = 1;
  // A flag to indicate whether to return the detail fields in response.
  bool verbose = 2;
}

// The response to a BOM request.
message BomResponse {
  // A list of the components in the BOM.
  repeated Component components = 1;
  // A list of labels of the BOM.
  repeated Label labels = 2;
  // Build phase (corresponding to HWID image_id).
  string phase = 3;
  // Error message if there was a problem decoding the HWID, if error is set
  // the other fields in the message should be disregarded.
  string error = 4;
  Status status = 5;
}

// A request to query all HWIDs with the board and filter.
message HwidsRequest {
  // The board as a string.
  string board = 1;
  // The included classes to filter the result.
  repeated string with_classes = 2;
  // The excluded classes to filter the result.
  repeated string without_classes = 3;
  // The included components to filter the result.
  repeated string with_components = 4;
  // The excluded components to filter the result.
  repeated string without_components = 5;
}

// The response to a HWIDs request.
message HwidsResponse {
  // A filtered list of the HWIDs for a board.
  repeated string hwids = 1;
  // Error message if there was a problem looking up the HWIDs.
  string error = 2;
  Status status = 3;
}

// A request to query possible component classes of a board.
message ComponentClassesRequest {
  // The board as a string.
  string board = 1;
}

// The response to a component classes request.
message ComponentClassesResponse {
  // A list of the components for a board.
  repeated string component_classes = 1;
  // Error message if there was a problem looking up components.
  string error = 2;
  Status status = 3;
}

// A request to query all components with the board and filter.
message ComponentsRequest {
  // The board as a string.
  string board = 1;
  // The included classes to filter the result.
  repeated string with_classes = 2;
}

// The response to a components request.
message ComponentsResponse {
  // A filtered list of the components for a board.
  repeated Component components = 1;
  // Error message if there was a problem looking up components.
  string error = 2;
  Status status = 3;
}

message NameChangedComponent {
  enum SupportStatus {
    SUPPORT_STATUS_UNSPECIFIED = 0;
    SUPPORTED = 1;
    DEPRECATED = 2;
    UNSUPPORTED = 3;
    UNQUALIFIED = 4;
    DUPLICATE = 5;
  }

  int64 cid = 1;
  int64 qid = 2;
  SupportStatus support_status = 3;
  string component_name = 4;
  // True if this component name has AVL information.
  bool has_cid_qid = 5;
}

message NameChangedComponents {
  repeated NameChangedComponent entries = 1;
}

// The response to a 'validate config' request.
message ValidateConfigResponse {
  // If an error occurred, this describes the error.
  string error_message = 1;
  Status status = 2;
}

// The response to a 'validate config and update checksum' request.
message ValidateConfigAndUpdateChecksumResponse {
  // The updated HWID config as a string.
  string new_hwid_config_contents = 1;
  // If an error occurred, this describes the error.
  string error_message = 2;
  Status status = 3;
  // Name-changed components per category.
  map<string, NameChangedComponents> name_changed_components_per_category = 4;
  // model name.
  string model = 5;
}

// A request to query SKU info from a given HWID string.
message SkuRequest {
  // The HWID as a string.
  string hwid = 1;
}

// The response to a BOM request.
message SkuResponse {
  // The board listed in the BOM.
  string board = 1;
  // The listed CPU in the BOM.
  string cpu = 2;
  // Total number of bytes of memory in the BOM.
  int64 memory_in_bytes = 3;
  // String combination of board, processor and memory.
  string sku = 4;
  // Error message if there was a problem decoding the HWID, if error is set
  // the other fields in the message should be disregarded.
  string error = 5;
  // A human readable string representing the memory on the device.
  string memory = 6;
  Status status = 7;
}

// A label of a DUT.
message DutLabel {
  // The name of the label.
  string name = 1;
  // The value of the property associated with this label name.
  string value = 2;
}

// A request to query DUT labels.
message DutLabelsRequest {
  // The HWID as a string.
  string hwid = 1;
}

// The response to a DUT label request.
message DutLabelsResponse {
  // A list of DUTLabel messages.
  repeated DutLabel labels = 1;
  // Details of any errors when constructing the list of labels.
  string error = 2;
  // Possible labels in the labels field.
  repeated string possible_labels = 3;
  Status status = 4;
}

service HwidService {
  rpc GetBoards(BoardsRequest) returns (BoardsResponse);

  rpc GetBom(BomRequest) returns (BomResponse);

  rpc GetSku(SkuRequest) returns (SkuResponse);

  rpc GetHwids(HwidsRequest) returns (HwidsResponse);

  rpc GetComponentClasses(ComponentClassesRequest)
      returns (ComponentClassesResponse);

  rpc GetComponents(ComponentsRequest) returns (ComponentsResponse);

  rpc ValidateConfig(ValidateConfigRequest) returns (ValidateConfigResponse);

  rpc ValidateConfigAndUpdateChecksum(ValidateConfigAndUpdateChecksumRequest)
      returns (ValidateConfigAndUpdateChecksumResponse);

  rpc GetDutLabels(DutLabelsRequest) returns (DutLabelsResponse);
}
